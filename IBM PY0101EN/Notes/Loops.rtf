{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww11520\viewh15180\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IBM\'a0PY0101EN\
06/26/2021\
\

\f1\b \ul Loops:\
\

\f0\b0 \ulnone range() outputs and an ordered sequence as a list, I. \
\
range(N) \'97> [0, \'85, N-1]\
\
If the input is a positive integer, the output is a sequence. \
\
range(3): [0,1,2]\
\
If the range function has two inputs where the first input is smaller than the second input, the output is a sequence that starts at the first input and ends one less than the last number.\
\
range(10,15): [10,11,12,13,14]\
\
NOTE: if you are using Python 3, the range function will not generate a list explicitly like in Python 2.\
\

\f1\b For loops: \

\f0\b0 *this section will focus on lists, but many of the procedures can be used on tuples as well.\
\
S = range(5)\
\
If we want to multiply each element in S by 10, we would do the following:\
[num*10 
\f1\b for
\f0\b0  num 
\f1\b in
\f0\b0  S]: [0, 10, 20, 30, 40]\
\
Squares = [\'93red\'94, \'93yellow\'94, \'93green\'94]\
\
Change each element in Squares to \'93white\'94\
[\'93white\'94 
\f1\b for
\f0\b0  square 
\f1\b in 
\f0\b0 squares]: [\'93white, \'93white\'94, \'93white\'94]\
\
enumerate() can be used to obtain the index and element in a list. \
enumerate(Squares): [(\'93red\'94, 0), (\'93yellow\'94, 1), (\'93green\'94, 2)]\
\
for i,square in enumerate(squares):\
\
	square\
	i\
\
(\'93red\'94,0)\
(\'93yellow\'94,1)\
(\'93green\'94,2)\
\

\f1\b While loops:
\f0\b0 \
squares = [\'93orange\'94, \'93orange\'94, \'93purple\'94, \'93orange\'94, \'93blue\'94]\
\
Newsquares = []\
i = 0\
\
while(squares[i] == \'93orange\'94)\
\
	Newsquares.append(squares[i])\
	i = i+1\
\
Newsquares: [\'93orange\'94, \'93orange\'94]\
\
}