{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue-BoldItalic;
}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;\red255\green255\blue255;\red53\green53\blue53;
}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;\cssrgb\c100000\c100000\c100000;\cssrgb\c27059\c27059\c27059;
}
\margl1440\margr1440\vieww11520\viewh15140\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs21 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IBM\'a0PY0101EN\
06/24/2021\
\

\f1\b \ul Sets:\

\f0\b0 \ulnone \
A type of collection\
Like lists and tuples, you can input different python types\
Unlike lists and tuples, they are unordered, meaning they don\'92t record element position\
Sets only have unique elements\
\
Can add an element to a set using the add() method\
\
Set1 = \{\'93pop\'94, \'93rock\'94, \'93soul\'94, \'93hard rock\'94, \'93rock\'94, \'93R&B\'94, \'93rock\'94, \'93disco\'94\}\
Set1: \{\'93pop\'94, \'93rock\'94, \'93soul\'94, \'93hard rock\'94, R&B\'94, \'93disco\'94\}\
\
Can convert a list to set by using the function set()\
\

\f1\b Set operations:\
\

\f2\i Imagine Venn diagram
\f1\i0 \

\f0\b0 A = \{\'93Triller\'94, \'93Back in Black\'94, \'93AC/DC\'94\}\
\
We can add elements to a set using the add() method\
A.add(\'93NSYNC\'94)\
A: \{\cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \'93Triller\'94, \'93Back in Black\'94, \'93AC/DC\'94, \'93NSYNC\'94\}\
\
Can remove item from set using remove() method\
A.remove(\'93NSYNC\'94)\
\
Can verify if item is in set using in command:\
\
\'93AC/DC\'94 in A\
True\
\'93Who\'94 in A\
False\
\

\f1\b Mathematical set operations:\

\f0\b0 Album_Set_1 = \{\'93Triller\'94, \'93Back in Black\'94, \'93AC/DC\'94\}\
Album_Set_2 = \cf4 \{\'93Dark Side of the Moon\'94, \'93Back in Black\'94, \'93AC/DC\'94\}\
\
Intersection of two sets is a new set containing common elements. \
Can find common elements between sets using &\
Album_Set_1 & Album_Set_2: \{\'93Back in Black\'94, \'93AC/DC\'94\}\
\
Same as using the intersection() method\
\
The union of two sets is the new set of elements which contain all items in both sets\
album_set_1.union(album_set_2)\
album_set_1 = \{\'93Dark Side of the Moon\'94, \'93Back in Black\'94, \'93AC/DC\'94, \'93Triller\}\
\
Consider new album sets:\
album_set_1 = \{\'93Dark Side of the Moon\'94, \'93Back in Black\'94, \'93AC/DC\'94\}\
album_set_3 = \{\'93Dark Side of the Moon\'94, \'93Back in Black\'94\}\
\
We can check if a set is a subset using the issubset() method\
album_set_3.issubset(album_set_1)\
True\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 Can check is superset of another set by using issuperset() method\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 album_set_1.issuperset(album_set_3)\
True\
\
We can find elements that are only contained in album_set_1 using the difference() method\
album_set_1.difference(album_set_3)\
\{\'93AC/DC\'94\}\
}